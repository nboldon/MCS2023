#Create Project 2

#Filter doublets
projMCS2 <- filterDoublets(projMCS1)
projMCS2

##Dimensionality reduction with ArchR

#Create a reducedDims object called "IterativeLSI"
projMCS2 <- addIterativeLSI(
	ArchRProj = projMCS2,
	useMatrix = "TileMatrix",
	name = "IterativeLSI2",
	iterations = 4,
	clusterParams = list ( 
		resolution = c(0.1, 0.2, 0.4),
		sampleCells = 10000,
		n.start = 10
	),
	varFeatures = 15000,
	dimsToUse = 1:30,
	seed = 123
)

#When the iterative LSI approach isn't enough of a correction for strong batch effect differences, the batch effect correction tool called Harmony can be used. This creates a new reducedDims object called "Harmony" in the MCS2 object
projMCS2 <- addHarmony(
	ArchRProj = projMCS2,
	reducedDims = "IterativeLSI2",
	name = "Harmony",
	groupBy = "Sample"
)

########################################

#Clustering using Seurat's FindClusters() function

projMCS2 <- addClusters(
	input = projMCS2,
	reducedDims = "IterativeLSI2",
	method = "Seurat",
	name = "Clusters",
	resolution = 0.8,
	seed = 123
)

#To better understand which samples reside in which clusters, create a cluster confusion matrix across each sample
cM <- confusionMatrix(paste0(projMCS2$Clusters), paste0(projMCS2$Sample))
cM

#To save the matrix as a .csv file
write.csv(cM, "SeuratClusters.csv")

#To plot the confusion matrix as a heatmap
cM <- cM / Matrix::rowSums(cM)
p <- pheatmap::pheatmap(
	mat = as.matrix(cM),
	color = paletteContinuous("whiteBlue"),
	border_color = "black"
)
p

######################################

##Single Cell Embeddings - UMAP

#To run a Uniform Manifold Approximation and Projection (UMAP)
projMCS2 <- addUMAP(
	ArchRProj = projMCS2,
	reducedDims = "IterativeLSI2",
	name = "UMAP",
	nNeighbors = 30,
	minDist = 0.5,
	metric = "cosine",
	seed = 123
)

#To plot the UMAP results by sample
p1 <- plotEmbedding(ArchRProj = projMCS2, colorBy = "cellColData", name = "Sample", embedding = "UMAP")

#To plot the UMAP results by cluster
p2 <- plotEmbedding(ArchRProj = projMCS2, colorBy = "cellColData", name = "Clusters", embedding = "UMAP")

#To visualize these 2 plots side by side
ggAlignPlots(p1, p2, type = "h")

#To save an editable vectorized version of the plots:
plotPDF(p1,p2, name = "UMAP-Sample-Clusters.pdf", ArchRProj = projMCS2, addDOC = FALSE, width = 5, height = 5)

#################################################

##Single cell embeddings - tSNE

#To run a t-Stocastic Neighbor Embedding (tSNE)
projMCS2 <- addTSNE(
	ArchRProj = projMCS2,
	reducedDims = "IterativeLSI2",
	name = "TSNE",
	perplexity = 30,
	seed = 123
)

#To plot the tSNE (the same parameters apply to colorBy and name regardless of the type of embedding used)
p1 <- plotEmbedding(
	ArchRProj = projMCS2,
	colorBy = "cellColData",
	name = "Sample",
	embedding = "TSNE"
)

p2 <- plotEmbedding(
	ArchRProj = projMCS2,
	colorBy = "cellColData",
	name = "Clusters",
	embedding = "TSNE"
)

ggAlignPlots(p1, p2, type = "h")

plotPDF(p1,p2, name = "TSNE-Sample-Clusters.pdf", ArchRProj = projMCS2, addDOC = FALSE, width = 5, height = 5)

#######################################

##Dimensionality reduction after Harmony for UMAP

#Used to assess the effects of Harmony by visualizing the embedding using UMAP or tSNE and comparing this to the embeddings visualized previously for iterative LSI.

#Repeat the UMAP embedding with the same parameters but for the "Harmony" reduced Dims object
projMCS2 <- addUMAP(
	ArchRProj = projMCS2,
	reducedDims = "Harmony",
	name = "UMAPHarmony",
	nNeighbors = 30,
	minDist = 0.5, 
	metric = "cosine",
	seed = 123
)

p3 <- plotEmbedding( 
	ArchRProj = projMCS2,
	colorBy = "cellColData", 
	name = "Sample",
	embedding = "UMAPHarmony"
)

p4 <- plotEmbedding(
	ArchRProj = projMCS2,
	colorBy = "cellColData",
	name = "Clusters",
	embedding = "UMAPHarmony"
)

ggAlignPlots(p3, p4, type = "h")

plotPDF(p1,p2,p3,p4, name = "UMAP2Harmony-Sample-Clusters.pdf", ArchRProj = projMCS2, addDOC = FALSE, width = 5, height = 5)

##Dimensionality reduction after Harmony for tSNE

#Follow similar steps to those used for UMAP

projMCS2 <- addTSNE(
        ArchRProj = projMCS2,
        reducedDims = "Harmony",
        name = "TSNEHarmony",
        perplexity = 30,
        seed = 123
)

p7 <- plotEmbedding(
        ArchRProj = projMCS2,
        colorBy = "cellColData",
        name = "Sample",
        embedding = "TSNEHarmony"
)

p8 <- plotEmbedding(
        ArchRProj = projMCS2,
        colorBy = "cellColData",
        name = "Clusters",
        embedding = "TSNEHarmony"
)

ggAlignPlots(p7, p8, type = "h")

plotPDF(p1,p2,p7,p8, name = "TSNE2Harmony-Sample-Clusters.pdf", ArchRProj = projMCS2, addDOC = FALSE, width = 5, height = 5)

