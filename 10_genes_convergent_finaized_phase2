setwd("/Volumes/DataBox/Final_Analysis_Convergence")

library(readxl)
library(dplyr)
library(tidyr)
library(stringr)

# Read the Excel file
data <- read_excel("shared_genes_analysis_relaxed_convergent-phase1.xlsx")

# Define cluster to cell type mapping
cluster_mapping <- list(
  "C1" = "astroPrecursor", "C7" = "astroPrecursor", "C9" = "astroPrecursor",
  "C2" = "oligo", "C3" = "oligo",
  "C4" = "glutOligo",
  "C5" = "oligoPrecursor", "C6" = "oligoPrecursor",
  "C8" = "astro",
  "C10" = "microglia", "C11" = "microglia",
  "C12" = "endo", "C13" = "endo", "C14" = "endo",
  "C15" = "glutPrecursor", "C16" = "glutPrecursor", "C17" = "glutPrecursor", 
  "C20" = "glutPrecursor", "C25" = "glutPrecursor",
  "C18" = "glut", "C19" = "glut", "C21" = "glut",
  "C22" = "gaba", "C23" = "gaba",
  "C24" = "glutAstro"
)

# Parse source file information
data <- data %>%
  mutate(
    comparison = str_extract(source_file, "t\\d+_vs_t\\d+"),
    cluster_or_celltype = str_extract(source_file, "(?<=_)[^_]+(?=_relaxed)"),
    is_cluster = str_detect(cluster_or_celltype, "^C\\d+"),
    cell_type = ifelse(is_cluster, 
                       unlist(cluster_mapping[cluster_or_celltype]), 
                       cluster_or_celltype),
    # Create reverse comparison
    reverse_comp = paste0(
      str_extract(comparison, "(?<=vs_)t\\d+"),
      "_vs_",
      str_extract(comparison, "^t\\d+")
    )
  )

# Quality check: identify genes meeting EACH criterion separately
bidirectional_check <- data %>%
  group_by(name, cell_type, comparison) %>%
  summarise(n = n(), .groups = "drop") %>%
  group_by(name, cell_type) %>%
  mutate(has_reverse = any(comparison %in% paste0(
    str_extract(comparison, "(?<=vs_)t\\d+"),
    "_vs_",
    str_extract(comparison, "^t\\d+")
  ))) %>%
  filter(has_reverse) %>%
  ungroup() %>%
  distinct(name, cell_type, comparison)

cluster_celltype_check <- data %>%
  group_by(name, cell_type, comparison) %>%
  summarise(
    has_cluster = any(is_cluster),
    has_celltype = any(!is_cluster),
    both = has_cluster & has_celltype,
    .groups = "drop"
  ) %>%
  filter(both) %>%
  distinct(name, cell_type, comparison)

# Find genes meeting BOTH criteria
validated_genes <- bidirectional_check %>%
  inner_join(cluster_celltype_check, by = c("name", "cell_type", "comparison"))

# Filter original data
final_data <- data %>%
  semi_join(validated_genes, by = c("name", "cell_type", "comparison"))

# Generate detailed statistics
stats <- list(
  total_unique_genes = length(unique(data$name)),
  genes_with_bidirectional = length(unique(bidirectional_check$name)),
  genes_with_cluster_and_celltype = length(unique(cluster_celltype_check$name)),
  final_validated_genes = length(unique(final_data$name)),
  total_rows_original = nrow(data),
  total_rows_final = nrow(final_data)
)

# Print statistics
cat("=== CONVERGENCE VALIDATION STATISTICS ===\n\n")
cat(sprintf("Original data:\n  - Total unique genes: %d\n  - Total rows: %d\n\n", 
            stats$total_unique_genes, stats$total_rows_original))
cat(sprintf("Criterion 1 (Bidirectional):\n  - Genes with bidirectional evidence: %d\n\n", 
            stats$genes_with_bidirectional))
cat(sprintf("Criterion 2 (Cluster + Cell Type):\n  - Genes in both cluster and cell type: %d\n\n", 
            stats$genes_with_cluster_and_celltype))
cat(sprintf("Final validated genes:\n  - Genes meeting BOTH criteria: %d\n  - Total rows retained: %d\n", 
            stats$final_validated_genes, stats$total_rows_final))
cat(sprintf("  - Percentage of original genes: %.1f%%\n\n", 
            100 * stats$final_validated_genes / stats$total_unique_genes))

# Criterion 1 (Bidirectional)
# Criterion 2 (Cluster + Cell Type)
# Genes meeting BOTH criteria: 103

# Create detailed gene summary
gene_summary <- final_data %>%
  group_by(name) %>%
  summarise(
    n_total_occurrences = n(),
    n_comparisons = n_distinct(comparison),
    comparisons = paste(sort(unique(comparison)), collapse = "; "),
    n_cell_types = n_distinct(cell_type),
    cell_types = paste(sort(unique(cell_type)), collapse = "; "),
    n_clusters = sum(is_cluster),
    clusters_involved = paste(sort(unique(cluster_or_celltype[is_cluster])), collapse = "; "),
    mean_log2fc = mean(Log2FC, na.rm = TRUE),
    mean_fdr = mean(FDR, na.rm = TRUE)
  ) %>%
  arrange(desc(n_comparisons), desc(n_cell_types))

# Export results
write.csv(final_data, "convergent_genes_validated_strict.csv", row.names = FALSE)
write.csv(gene_summary, "convergent_genes_summary_strict.csv", row.names = FALSE)

# Show top validated genes
cat("=== TOP 10 MOST ROBUST GENES (by # comparisons) ===\n")
print(head(gene_summary %>% select(name, n_comparisons, n_cell_types, comparisons), 10))

# name          n_comparisons n_cell_types comparisons                                                        
# 1 App                       8            6 t1_vs_t3; t1_vs_t4; t2_vs_t3; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_…
# 2 Hunk                      8            6 t1_vs_t3; t1_vs_t4; t2_vs_t3; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_…
# 3 Tiam1                     8            5 t1_vs_t3; t1_vs_t4; t2_vs_t3; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_…
# 4 Arid1b                    8            4 t1_vs_t3; t1_vs_t4; t2_vs_t3; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_…
# 5 Gm10791                   8            4 t1_vs_t3; t1_vs_t4; t2_vs_t3; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_…
# 6 Synj2                     8            3 t1_vs_t3; t1_vs_t4; t2_vs_t3; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_…
# 7 Ezr                       7            6 t1_vs_t3; t1_vs_t4; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_t1; t4_vs_…
# 8 Erg                       7            4 t1_vs_t3; t2_vs_t3; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_t1; t4_vs_…
# 9 Tulp4                     7            4 t1_vs_t3; t1_vs_t4; t2_vs_t3; t2_vs_t4; t3_vs_t1; t4_vs_t1; t4_vs_…
# 10 1600002D24Rik             7            3 t1_vs_t3; t1_vs_t4; t2_vs_t4; t3_vs_t1; t3_vs_t2; t4_vs_t1; t4_vs_…


# Cell type breakdown
cat("\n=== VALIDATED GENES BY CELL TYPE ===\n")
celltype_breakdown <- final_data %>%
  group_by(cell_type) %>%
  summarise(n_unique_genes = n_distinct(name)) %>%
  arrange(desc(n_unique_genes))
print(celltype_breakdown)

# cell_type      n_unique_genes
# 1 glutPrecursor              94
# 2 glut                       62
# 3 gaba                       61
# 4 oligo                      13
# 5 astro                       6
# 6 glutOligo                   5
# 7 oligoPrecursor              5
# 8 endo                        1
# 9 glutAstro                   1
